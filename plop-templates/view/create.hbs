<template>
  <el-form
    v-loading="$store.state.loading.isShow"
    @submit.prevent="handleSubmitForm"
    :model="form"
    label-position="top"
    ref="REF_FORM"
    class="detail-wrap"
  >
    <div class="detail" style="width: 100%">
      <div class="card mb-3">
        <div class="card-header">
          \{{ $i18n.global.t('Util.create') }}
        </div>
        <div class="card-body d-lg-flex flex-wrap">
          <el-form-item
            class="col-12"
            :label="$i18n.global.t(inputForm.name.label)"
            :prop="inputForm.name.id"
            :rules="inputForm.name.rules"
          >
            <el-input
              :placeholder="$i18n.global.t(inputForm.name.label)"
              v-model="form[inputForm.name.id]"
            />
          </el-form-item>
        </div>
      </div>
    </div>
  </el-form>
</template>

<script lang='ts'>
import { defineComponent, reactive, toRefs, onMounted } from 'vue';
import { utilTools } from '@/modules/FPKG-20000-Util/prototypes/utilTools';
import ELFORM from '@/modules/FPKG-20000-Util/API/elForm/index';
import { useRouter } from 'vue-router';
import Create, { typeCreate } from './Service/Create';
import inputForm from './form';

export default defineComponent({
  name: '{{dashCase BASE_NAME}}--Create',
  setup() {
    const { proxy } = utilTools();
    const { REF_FORM, reset, submitForm } = ELFORM();
    const router = useRouter();
    const data = reactive({
      form: {} as typeCreate.request,
      keepCreate: false,
    });

    /** 送出表單 */
    const handleSubmitForm = async () => {
      await submitForm();
      const getter = await Create(data.form);
      if (getter) {
        if (!data.keepCreate) {
          router.push('/{{API}}');
        }
        resetForm();
        data.keepCreate = false;
      }
    };

    /** 清除表單 */
    const resetForm = () => {
      reset();
    };

    onMounted(() => {
      proxy.$bus.$on('saveAndGo', () => {
        handleSubmitForm();
      });

      proxy.$bus.$on('keepCreate', () => {
        data.keepCreate = true;
        handleSubmitForm();
      });
    });

    const refData = toRefs(data);

    return {
      ...refData,
      handleSubmitForm,
      REF_FORM,
      inputForm,
    };
  },
});
</script>
